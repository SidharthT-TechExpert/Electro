<!-- Bootstrap & FontAwesome -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />

<link rel="stylesheet" href="/css/admin/DashBoard/header.css">
<link rel="stylesheet" href="/css/admin/DashBoard/customerList.css">
<link rel="stylesheet" href="/css/admin/DashBoard/category.css">
<link rel="stylesheet" href="/css/admin/DashBoard/ProductDetails.css">
<link rel="stylesheet" href="/css/admin/DashBoard/pageNavigation.css">


<%- include("../../partials/admin/sidebar") %>
  <%- include("../../partials/admin/header") %>
    <%- include("../../partials/user/messages") %>

      <div class="main-content">

        <!-- Page Header -->
        <div class="content-header">
          <h2>Offers</h2>
          <div class="page-header mb-3">
            <a onclick="addOfferModal()" class="btn btn-primary"><i class="fa fa-plus"></i> Add Offer</a>
          </div>
        </div>

        <!-- Offers Table -->
        <div class="table-wrapper table-responsive">
          <table class="table align-middle">
            <thead>
              <tr>
                <th>#</th>
                <th>Offer Name</th>
                <th>Offer Code</th>
                <th>Discount Type</th>
                <th>Value</th>
                <th>Applies To</th>
                <th>Targets</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% offerData.forEach((offer, i)=> {
                // Get target names for this offer
                let targetNames = [];
                if (offer.appliesTo === "product") {
                targetNames = products
                .filter(p => offer.targetIds.includes(p._id.toString()))
                .map(p => p.name);
                } else if (offer.appliesTo === "category") {
                targetNames = categories
                .filter(c => offer.targetIds.includes(c._id.toString()))
                .map(c => c.name);
                }
                %>
                <tr>
                  <td>
                    <%= i + 1 %>
                  </td>
                  <td class="offer-name">
                    <%= offer.name %>
                  </td>
                  <td class="offer-code">
                    <%= offer.code %>
                  </td>
                  <td class="offer-type">
                    <%= offer.discountType %>
                  </td>
                  <td class="offer-value">
                    <%= offer.discountValue %>
                  </td>
                  <td class="offer-appliesto">
                    <%= offer.appliesTo %>
                  </td>
                  <td class="offer-targets">
                    <%- targetNames.join("<br>") %>
                  </td>
                  <td class=" offer-start">
                    <%= new Date(offer.startDate).toLocaleDateString() %>
                  </td>
                  <td class="offer-end">
                    <%= new Date(offer.endDate).toLocaleDateString() %>
                  </td>
                  <td class="status-badge-<%= offer._id %>">
                    <% const today=new Date(); const startDate=new Date(offer.startDate); const endDate=new
                      Date(offer.endDate); %>

                      <% if (today < startDate && offer.isActive) { %>
                        <!-- Offer hasn't started yet -->
                        <span class="badge bg-secondary">Upcoming</span>
                        <% } else if (today> endDate || offer.isActive == false) { %>
                          <!-- Offer has ended -->
                          <span class="badge bg-danger">Expired</span>
                          <% } else { %>
                            <!-- Offer is currently active -->
                            <span class="badge bg-success">Active</span>
                            <% } %>
                  </td>

                  <td>
                    <button class="btn btn-sm btn-warning me-1" onclick="editOffer('<%= offer._id %>')">
                      <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="deleteOffer('<%= offer._id %>')">
                      <i class="fas fa-trash"></i>
                    </button>
                  </td>
                </tr>
                <% }) %>
            </tbody>

          </table>
        </div>

        <!-- Pagination -->
        <div class="pagination">
          <!-- Prev button -->
          <% if (currentPage> 1) { %>
            <a href="?page=<%= currentPage - 1 %>">
              <button class="nav-btn">Prev</button>
            </a>
            <% } else { %>
              <button class="nav-btn" disabled>Prev</button>
              <% } %>

                <!-- Page numbers -->
                <% for (let i=1; i <=totalPages; i++) { %>
                  <% if (currentPage===i) { %>
                    <button class="page-btn active">
                      <%= i %>
                    </button>
                    <% } else { %>
                      <a href="?page=<%= i %>">
                        <button class="page-btn">
                          <%= i %>
                        </button>
                      </a>
                      <% } %>
                        <% } %>

                          <!-- Next button -->
                          <% if (currentPage < totalPages) { %>
                            <a href="?page=<%= currentPage + 1 %>">
                              <button class="nav-btn">Next</button>
                            </a>
                            <% } else { %>
                              <button class="nav-btn" disabled>Next</button>
                              <% } %>
        </div>

      </div>

      <script>
        const products = <%- JSON.stringify(products) %>;
        const categories = <%- JSON.stringify(categories) %>;

        function addOfferModal() {
          Swal.fire({
            title: "➕ Add New Offer",
            html: `
      <div class="swal-scrollable p-2">
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Offer Name</label>
          <input type="text" id="swal-input-name" class="form-control" placeholder="Enter offer name">
        </div>
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Offer Code</label>
          <input type="text" id="swal-input-code" class="form-control" placeholder="Enter offer code">
        </div>
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Discount Type</label>
          <select id="swal-input-type" class="form-control">
            <option value="Percentage" selected>Percentage</option>
            <option value="Fixed">Fixed</option>
          </select>
        </div>
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Discount Value</label>
          <input type="number" id="swal-input-value" class="form-control" placeholder="Enter discount value">
        </div>

        <!-- Dynamic Max Amount field -->
        <div class="mb-3 text-start d-none" id="maxAmountContainer">
          <label class="form-label fw-bold">Max Discount Amount</label>
          <input type="number" id="swal-input-max" class="form-control" placeholder="Enter maximum discount amount">
        </div>

        <div class="mb-3 text-start">
          <label for="appliesTo" class="form-label fw-bold">Applies To</label>
          <select class="form-control" id="appliesTo" required>
            <option value="product">Product</option>
            <option value="category">Category</option>
          </select>
        </div>
        <div class="mb-3 text-start">
          <label for="targetIds" class="form-label fw-bold">Select Targets</label>
          <select class="form-control" id="targetIds" multiple required>
            ${products.map(p => `<option value="${p._id}">${p.name}</option>`).join('')}
          </select>
        </div>
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Start Date</label>
          <input type="date" id="swal-input-start" class="form-control">
        </div>
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">End Date</label>
          <input type="date" id="swal-input-end" class="form-control">
        </div>
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Status</label>
          <select id="swal-input-status" class="form-control">
            <option value="true">Active</option>
            <option value="false">Expired</option>
            <option value="true">Upcoming</option>
          </select>
        </div>
      </div>
    `,
            showCancelButton: true,
            confirmButtonText: "Add Offer",
            didOpen: () => {
              const appliesToSelect = document.getElementById("appliesTo");
              const targetSelect = document.getElementById("targetIds");
              const discountTypeSelect = document.getElementById("swal-input-type");
              const maxAmountContainer = document.getElementById("maxAmountContainer");

              // ✅ Function to toggle max discount visibility
              function toggleMaxAmountField() {
                if (discountTypeSelect.value === "Percentage") {
                  maxAmountContainer.classList.remove("d-none");
                } else {
                  maxAmountContainer.classList.add("d-none");
                  document.getElementById("swal-input-max").value = "";
                }
              }

              // ✅ Call once on open to handle default state
              toggleMaxAmountField();

              // ✅ Also handle changes dynamically
              discountTypeSelect.addEventListener("change", toggleMaxAmountField);

              appliesToSelect.addEventListener("change", function () {
                const items = this.value === "product" ? products : categories;
                targetSelect.innerHTML = "";
                items.forEach(item => {
                  const option = document.createElement("option");
                  option.value = item._id;
                  option.text = item.name;
                  targetSelect.appendChild(option);
                });
              });
            },
            preConfirm: () => {
              const targetSelect = document.getElementById("targetIds");
              const selectedTargetIds = Array.from(targetSelect.selectedOptions).map(o => o.value);

              const name = document.getElementById("swal-input-name").value.trim();
              const code = document.getElementById("swal-input-code").value.trim();
              const discountType = document.getElementById("swal-input-type").value;
              const discountValue = document.getElementById("swal-input-value").value;
              const maxAmount = document.getElementById("swal-input-max").value;
              const appliesTo = document.getElementById("appliesTo").value;
              const startDate = document.getElementById("swal-input-start").value;
              const endDate = document.getElementById("swal-input-end").value;
              const status = document.getElementById("swal-input-status").value;

              if (selectedTargetIds.length === 0) {
                Swal.showValidationMessage("⚠️ Targets is required!");
                return false;
              }

              if (!name || !code || !discountType || !appliesTo || !discountValue || !startDate || !endDate) {
                Swal.showValidationMessage("⚠️ All fields are required!");
                return false;
              }

              if (discountType === "Percentage" && !maxAmount) {
                Swal.showValidationMessage("⚠️ Max Discount Amount is required for Percentage type!");
                return false;
              }

              $.ajax({
                url: '/admin/offers/check-code',
                method: 'POST',
                data: { code },
                async: false,
                success: function (response) {
                  if (response.isUnique) {
                    Swal.showValidationMessage("⚠️ Offer code must be unique!");
                    return false;
                  }
                }
              });

              $.ajax({
                url: '/admin/offers/check-Date',
                method: 'POST',
                data: { startDate, endDate },
                async: false,
                success: function (response) {
                  if (!response.valid) {
                    Swal.showValidationMessage(`⚠️ ${response.message}`);
                    return false;
                  }
                }
              });

              $.ajax({
                url: '/admin/offers/check-discount',
                method: 'POST',
                data: { discountType, discountValue , maxAmount },
                async: false,
                success: function (response) {
                  if (!response.valid) {
                    Swal.showValidationMessage(`⚠️ ${response.message}`);
                    return false;
                  }
                }
              });

              return {
                name, code, discountType, discountValue, maxAmount,
                appliesTo, targetIds: selectedTargetIds,
                startDate, endDate, isActive: status === "true"
              };
            }
          }).then(result => {
            if (result.isConfirmed) {
              $.ajax({
                type: "POST",
                url: "/admin/offers",
                contentType: "application/json",
                data: JSON.stringify(result.value),
                success: function (response) {
                  if (response.success) {
                    Swal.fire({
                      icon: "success",
                      title: "Offer Added Successfully",
                      timer: 1500,
                      showConfirmButton: false
                    }).then(() => location.reload());
                  } else {
                    Swal.fire("Error", response.message, "error");
                  }
                }
              });
            }
          });
        }
        
        function editOffer(id) {
          // Fetch existing offer data
          const offer = <%- JSON.stringify(offerData) %>.find(o => o._id === id);
          
          if (!offer) {
            Swal.fire("Error", "Offer not found", "error");
            return;
          }

          Swal.fire({
            title: "✏️ Edit Offer",
            html: `
      <div class="swal-scrollable p-2">
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Offer Name</label>
          <input type="text" id="swal-input-name" class="form-control" value="${offer.name}">
        </div>  
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Offer Code</label>
          <input type="text" id="swal-input-code" class="form-control" value="${offer.code}">
        </div>
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Discount Type</label>
          <select id="swal-input-type" class="form-control">
            <option value="Percentage" ${offer.discountType === "Percentage" ? "selected" : ""}>Percentage</option>
            <option value="Fixed" ${offer.discountType === "Fixed" ? "selected" : ""}>Fixed</option>
          </select>
        </div>
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Discount Value</label>
          <input type="number" id="swal-input-value" class="form-control"
            value="${offer.discountValue}">
        </div>
        <!-- Dynamic Max Amount field -->
        <div class="mb-3 text-start ${offer.discountType === "Percentage" ? "" : "d-none"}" id="maxAmountContainer">
          <label class="form-label fw-bold">Max Discount Amount</label>
          <input type="number" id="swal-input-max" class="form-control" value="${offer.maxAmount || ''}" placeholder="Enter maximum discount amount">
        </div>
        <div class="mb-3 text-start">
          <label for="appliesTo" class="form-label fw-bold">Applies To</label>
          <select class="form-control" id="appliesTo" required>
            <option value="product" ${offer.appliesTo === "product" ? "selected" : ""}>Product</option>
            <option value="category" ${offer.appliesTo === "category" ? "selected" : ""}>Category</option>
          </select>
        </div>
        <div class="mb-3 text-start">
          <label for="targetIds" class="form-label fw-bold">Select Targets</label>
          <select class="form-control" id="targetIds" multiple required>
            ${products.map(p => `<option value="${p._id}" ${offer.targetIds.includes(p._id) ? "selected" : ""}>${p.name}</option>`).join('')}
          </select>
        </div>
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Start Date</label>
          <input type="date" id="swal-input-start" class="form-control"
            value="${new Date(offer.startDate).toISOString().split('T')[0]}">
        </div>
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">End Date</label>
          <input type="date" id="swal-input-end" class="form-control"
            value="${new Date(offer.endDate).toISOString().split('T')[0]}">
        </div>
        <div class="mb-3 text-start">
          <label class="form-label fw-bold">Status</label>
          <select id="swal-input-status" class="form-control">
            <option value="true" ${offer.isActive ? "selected" : ""}>Active</option>
            <option value="false" ${!offer.isActive ? "selected" : ""}>Expired</option>
            <option value="true">Upcoming</option>
          </select>
        </div>
      </div>
    `,
            showCancelButton: true,
            confirmButtonText: "Save Changes",
            didOpen: () => {
              const appliesToSelect = document.getElementById("appliesTo");
              const targetSelect = document.getElementById("targetIds");
              const discountTypeSelect = document.getElementById("swal-input-type");
              const maxAmountContainer = document.getElementById("maxAmountContainer");

              // ✅ Function to toggle max discount visibility
              function toggleMaxAmountField() {
                if (discountTypeSelect.value === "Percentage") {
                  maxAmountContainer.classList.remove("d-none");
                } else {
                  maxAmountContainer.classList.add("d-none");
                  document.getElementById("swal-input-max").value = "";
                }
              }

              // ✅ Call once on open to handle default state
              toggleMaxAmountField();

              // ✅ Also handle changes dynamically
              discountTypeSelect.addEventListener("change", toggleMaxAmountField);

              appliesToSelect.addEventListener("change", function () {
                const items = this.value === "product" ? products : categories;
                targetSelect.innerHTML = "";
                items.forEach(item => {
                  const option = document.createElement("option");
                  option.value = item._id;
                  option.text = item.name;
                  targetSelect.appendChild(option);
                });
              });
            },
            preConfirm: () => {
              const targetSelect = document.getElementById("targetIds");
              const selectedTargetIds = Array.from(targetSelect.selectedOptions).map(o => o.value);

              const name = document.getElementById("swal-input-name").value.trim();
              const code = document.getElementById("swal-input-code").value.trim();
              const discountType = document.getElementById("swal-input-type").value;
              const discountValue = document.getElementById("swal-input-value").value;
              const maxAmount = document.getElementById("swal-input-max").value;
              const appliesTo = document.getElementById("appliesTo").value;
              const startDate = document.getElementById("swal-input-start").value;
              const endDate = document.getElementById("swal-input-end").value;
              const status = document.getElementById("swal-input-status").value;
              
              if (selectedTargetIds.length === 0) {
                Swal.showValidationMessage("⚠️ Targets is required!");
                return false;
              }
             
              if (!name || !code || !discountType || !appliesTo || !discountValue || !startDate || !endDate) {
                Swal.showValidationMessage("⚠️ All fields are required!");
                return false;
              }
             
              if (discountType === "Percentage" && !maxAmount) {
                Swal.showValidationMessage("⚠️ Max Discount Amount is required for Percentage type!");
                return false;
              }
              
              if (code !== offer.code) {
                $.ajax({
                  url: '/admin/offers/check-code',
                  method: 'POST',
                  data: { code },
                  async: false,
                  success: function (response) {
                    if (response.isUnique) {
                      Swal.showValidationMessage("⚠️ Offer code must be unique!");
                      return false;
                    }
                  }
                });
              }

              $.ajax({
                url: '/admin/offers/check-Date',
                method: 'POST',
                data: { startDate, endDate },
                async: false,
                success: function (response) {
                  if (!response.valid) {
                    Swal.showValidationMessage(`⚠️ ${response.message}`);
                    return false;
                  }
                }
              });

              $.ajax({
                url: '/admin/offers/check-discount',
                method: 'POST',
                data: { discountType, discountValue , maxAmount },
                async: false,
                success: function (response) {
                  if (!response.valid) {
                    Swal.showValidationMessage(`⚠️ ${response.message}`);
                    return false;
                  }
                }
              });
              return {
                id,
                name, code, discountType, discountValue, maxAmount,
                appliesTo, targetIds: selectedTargetIds,
                startDate, endDate, isActive: status === "true"
              };
            }
          }).then(result => {
            if (result.isConfirmed) {
              $.ajax({
                type: "PATCH",
                url: "/admin/offers",
                contentType: "application/json",
                data: JSON.stringify(result.value),
                success: function (response) {
                  if (response.success) {
                    Swal.fire({
                      icon: "success",
                      title: "Offer Updated Successfully",
                      timer: 1500,
                      showConfirmButton: false
                    }).then(() => location.reload());
                  } else {
                    Swal.fire("Error", response.message, "error");
                  }
                }
              });
            }
          });
        }

        function deleteOffer(id) {
          Swal.fire({
            title: "Are you sure?",
            text: "This action will delete the offer permanently.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "Cancel"
          }).then((result) => {
            if (result.isConfirmed) {
              $.ajax({
                type: "DELETE",
                url: `/admin/offers`,
                data: { id },
                success: function (response) {
                  if (response.success) {
                    Swal.fire({
                      icon: "success",
                      title: "Offer Deleted Successfully",
                      timer: 1500,
                      showConfirmButton: false
                    }).then(() => location.reload());
                  } else {
                    Swal.fire("Error", response.message, "error");
                  }
                }
              });
            }
          });
        }
        

      </script>

      <style>
        /* Responsive table */
        .table-wrapper {
          overflow-x: auto;
          width: 100%;
        }

        .table-wrapper table {
          min-width: 1000px;
        }

        /* SweetAlert2 modal */
        .swal2-popup {
          width: 90% !important;
          max-width: 700px !important;
        }

        .swal-scrollable {
          max-height: 70vh;
          overflow-y: auto;
        }

        .swal2-popup .form-control {
          width: 100% !important;
          box-sizing: border-box;
        }

        /* Mobile-friendly stacked table rows */
        @media (max-width: 768px) {
          .table thead {
            display: none;
          }

          .table tbody tr {
            display: block;
            margin-bottom: 1rem;
            border: 1px solid #ddd;
            padding: 0.5rem;
          }

          .table tbody td {
            display: flex;
            justify-content: space-between;
            padding: 0.25rem 0.5rem;
            border: none;
            border-bottom: 1px solid #eee;
          }

          .table tbody td::before {
            content: attr(data-label);
            font-weight: bold;
            flex: 1;
          }
        }
      </style>
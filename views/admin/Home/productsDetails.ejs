<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <title>Product Variants</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/admin/DashBoard/category.css">
  <link rel="stylesheet" href="/css/admin/DashBoard/ProductDetails.css">
  <style>
    .swal-wide {
      width: 60% !important;
    }

    .image-upload-placeholder {
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px dashed #6c757d;
      padding: 10px;
      width: 50px;
      height: 50px;
    }

    .variant-image-container img {
      border-radius: 4px;
    }
  </style>
</head>

<body>
  <!-- Sidebar + Header -->
  <%- include("../../partials/admin/sidebar", { activePage: activePage }) %>
    <%- include("../../partials/admin/header") %>
      <%- include("../../partials/user/messages") %>

        <div class="admin-page-content">
          <!-- Top Bar -->
          <div class="top-bar d-flex justify-content-between align-items-center flex-wrap gap-2">
            <a href="/admin/products" class="btn btn-outline-primary"><i class="fa fa-arrow-left"></i> Back to
              Products</a>
            <div class="btn-group">
              <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                <i class="fa fa-ellipsis-v"></i> Actions
              </button>
              <ul class="dropdown-menu dropdown-menu-end">
                <li><a class="dropdown-item" href="/admin/products/edit/<%= product._id %>"><i
                      class="fa fa-edit text-primary"></i> Edit</a></li>
                <li><a class="dropdown-item text-warning" href="/admin/products/block/<%= product._id %>"><i
                      class="fa fa-ban"></i> Block</a></li>
                <li>
                  <hr class="dropdown-divider">
                </li>
                <li><a class="dropdown-item text-danger" href="/admin/products/delete/<%= product._id %>"><i
                      class="fa fa-trash"></i> Delete</a></li>
              </ul>
            </div>
          </div>

          <!-- Product Banner -->
          <div class="product-banner d-flex justify-content-between align-items-center flex-wrap gap-2">
            <div>
              <h2>
                <%= product?.name %>
              </h2>
              <p class="mb-0">
                <strong>Brand:</strong>
                <%= product?.brand?.name || "Unbranded" %> &nbsp;|&nbsp;
                  <strong>Category:</strong>
                  <%= product?.category?.name || "Uncategorized" %>
              </p>
            </div>
            <div>
              <span class="badge-status badge-<%= product?.status %>">
                <%= product?.status %>
              </span>
            </div>
          </div>

          <!-- Info Cards -->
          <div class="info-cards d-flex gap-3 mt-3" style="justify-content: center;">
            <div class="info-card col-md-3">
              <h6>Base Price</h6>
              <p>₹<%= (product?.price || 0).toFixed(2) %>
              </p>
            </div>
            <div class="info-card col-md-4">
              <h6>Total Variants</h6>
              <p>
                <%= variants?.length || 0 %>
              </p>
            </div>
            <div class="info-card col-md-3">
              <h6>Created At</h6>
              <p>
                <%= product.createdAt?.toDateString() %>
              </p>
            </div>
          </div>

          <% const variantFields=(typeof variantField !=="undefined" && variantField) ? variantField :
            ["color","material","size","stock","price","sku","description","images","ram","storage","battery","display","os"];
            %>

            <!-- Variants Table -->
            <div class="card p-3 mt-3">
              <div class="d-flex justify-content-between align-items-center mb-2">
                <h5 class="mb-0">Variants</h5>
                <button class="btn btn-success btn-sm" onclick="openVariantFromData(this)">
                  <i class="fa fa-plus"></i> Add Variant
                </button>
              </div>
              <div class="table-responsive">
                <table class="table table-bordered variants-table">
                  <thead>
                    <tr>
                      <% variantFields.forEach(f=> { %>
                        <th>
                          <%= f.charAt(0).toUpperCase() + f.slice(1) %>
                        </th>
                        <% }) %>
                          <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if (variants.length> 0) { %>
                      <% variants.forEach(variant=> { %>
                        <tr>
                          <% variantFields.forEach(f=> { %>
                            <td>
                              <% if(f==='images' ){ %>
                                <div class="variant-image-container" data-variant-id="<%= variant._id %>">
                                  <% if(variant.product_image && variant.product_image.length>0){ %>
                                    <div class="existing-images">
                                      <% variant.product_image.forEach(img=> { %>
                                        <div class="image-item">
                                          <img src="<%= img %>" style="width:50px;height:50px;" class="me-1">
                                          <button class="remove-existing-image" data-image="<%= img %>"
                                            data-variant-id="<%= variant._id %>">
                                            <i class="fa fa-times"></i>
                                          </button>
                                        </div>
                                        <% }) %>
                                    </div>
                                    <% } %>
                                      <div class="add-image-box" data-variant-id="<%= variant._id %>">
                                        <div class="image-upload-placeholder">
                                          <i class="fa fa-plus"></i><span>Add</span>
                                        </div>
                                      </div>
                                </div>
                                <% } else { %>
                                  <%= variant[f] ?? variant.specifications?.get(f) ?? "-" %>
                                    <% } %>
                            </td>
                            <% }) %>
                              <td>
                                <a href="javascript:void(0);" class="btn btn-sm btn-primary"
                                  data-variant='<%- encodeURIComponent(JSON.stringify(variant)) %>'
                                  onclick="openVariantFromData(this)">
                                  <i class="fa fa-edit"></i>
                                </a>


                                <a onclick="deleteVariant('<%= variant._id %>')" class="btn btn-sm btn-danger">
                                  <i class="fa fa-trash"></i>
                                </a>
                              </td>
                        </tr>
                        <% }) %>
                          <% } else { %>
                            <tr>
                              <td colspan="<%= variantFields.length + 1 %>" class="text-center">No variants available
                              </td>
                            </tr>
                            <% } %>
                  </tbody>
                </table>
              </div>
            </div>
        </div>

        <!-- JS -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
        <script>
          // --- Helpers ---
          const escapeHtml = (s) => String(s == null ? '' : s)
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;');

          const getVariantValue = (vd, f) => {
            if (!vd) return '';
            if (vd[f] !== undefined && vd[f] !== null) return vd[f];
            if (vd.specifications) {
              try {
                if (typeof vd.specifications.get === 'function') {
                  return vd.specifications.get(f) ?? '';
                }
                return vd.specifications[f] ?? '';
              } catch (e) {
                return '';
              }
            }
            return '';
          };

          // --- Open variant from element (edit) or handle add-mode ---
          function openVariantFromData(el) {
            try {
              console.log('openVariantFromData called, el:', el);
              if (!el || !el.dataset || !el.dataset.variant) {
                // no data → add mode
                console.log('No variant data found on element — opening Add Variant');
                return openVariantPopup({});
              }

              const variantStr = el.getAttribute('data-variant') || el.dataset.variant || '';
              const decoded = decodeURIComponent(variantStr || '');
              const variantData = decoded ? JSON.parse(decoded) : {};
              console.log('Parsed variantData:', variantData);
              openVariantPopup(variantData);
            } catch (err) {
              console.error('Failed to parse variant data:', err);
              Swal.fire({ icon: 'error', title: 'Error', text: 'Could not load variant data.' });
            }
          }

          // --- Main popup builder & handler ---
          function openVariantPopup(variantData = {}) {
            console.log('openVariantPopup called with:', variantData);

            // ✅ Injected array from server-side EJS (avoid JSON.parse/string quotes)
            const variantFields = <%- JSON.stringify(variantFields) %>;
            console.log('variantFields (client):', variantFields, 'isArray:', Array.isArray(variantFields));
            if (!Array.isArray(variantFields)) {
              console.error('variantFields is not an array. Fix server-side injection.');
              return Swal.fire({ icon: 'error', title: 'Server Error', text: 'Invalid variant field configuration.' });
            }

            // Build form HTML (escape values to avoid breaking the HTML)
            let formHtml = `<form id="swalVariantForm" class="row g-3" onsubmit="return false;">`;
            variantFields.forEach(f => {
              if (!['description', 'images'].includes(f)) {
                const type = ['price', 'stock'].includes(f) ? 'number' : 'text';
                const step = f === 'price' ? 'step="0.01"' : '';
                const val = escapeHtml(getVariantValue(variantData, f));
                const placeholder = escapeHtml(f.charAt(0).toUpperCase() + f.slice(1));
                formHtml += `<div class="col-md-4">
            <input type="${type}" name="${f}" class="form-control" ${step}
              value="${val}"
              placeholder="${placeholder}" required>
          </div>`;
              }
            });

            if (variantFields.includes('description')) {
              const desc = escapeHtml(variantData.description || '');
              formHtml += `<div class="col-12">
          <textarea name="description" class="form-control" placeholder="Description">${desc}</textarea>
        </div>`;
            }
            formHtml += `</form>`;

            Swal.fire({
              title: variantData._id ? 'Edit Variant' : 'Add Variant',
              html: formHtml,
              customClass: 'swal-wide',
              showCancelButton: true,
              confirmButtonText: variantData._id ? 'Update' : 'Save',
              focusConfirm: false,
              allowOutsideClick: () => !Swal.isLoading(),

              preConfirm: async () => {
                console.log('preConfirm started');
                try {
                  const form = document.getElementById('swalVariantForm');

                  if (!form) {
                    Swal.showValidationMessage('Form not found.');
                    console.error('Form element not found in DOM.');
                    return false;
                  }

                  const fd = new FormData(form);
                  const data = {};
                  let hasEmpty = false;

                  // collect values and detect empties safely
                  fd.forEach((value, key) => {
                    // treat strings with only whitespace as empty
                    if (typeof value === 'string' && value.trim() === '') hasEmpty = true;
                    // convert numbers where applicable
                    if (['price', 'stock'].includes(key)) {
                      const num = Number(value);
                      data[key] = isNaN(num) ? value : num;
                    } else {
                      data[key] = value;
                    }
                  });

                  console.log('Collected form data:', data, 'hasEmpty:', hasEmpty);
                  if (hasEmpty) {
                    Swal.showValidationMessage('Please fill out all fields!');
                    return false;
                  }

                  // only check SKU when present — protects against missing endpoint or unexpected response
                  if ('sku' in data) {
                    try {
                      Swal.showLoading();
                      const resp = await fetch('/admin/products/variants/check-sku', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ sku: data.sku, variantId: variantData._id })
                      });

                      // protect against non-json or server errors
                      if (!resp.ok) {
                        const txt = await resp.text().catch(() => '');
                        throw new Error('SKU check network error: ' + resp.status + ' ' + txt);
                      }

                      const json = await resp.json().catch(_ => { throw new Error('Invalid JSON from SKU check'); });
                      console.log('SKU check response:', json);

                      if (json.exists) {
                        Swal.hideLoading();
                        Swal.showValidationMessage('SKU already exists!');
                        return false;
                      }

                    } catch (err) {
                      console.error('SKU check failed:', err);
                      Swal.hideLoading();
                      Swal.showValidationMessage('Error checking SKU: ' + (err.message || err));
                      return false;
                    } finally {
                      Swal.hideLoading();
                    }
                  }

                  console.log('preConfirm returning data:', data);
                  return data;

                } catch (err) {
                  console.error('unexpected error in preConfirm:', err);
                  Swal.showValidationMessage('Unexpected error: ' + (err.message || err));
                  return false;
                }
              }
            }).then(result => {
              console.log('Swal closed with:', result);
              if (result.isConfirmed) {
                if (!result.value) {
                  console.warn('preConfirm did not return a value — aborting save');
                  return;
                }
                console.log('Calling saveVariant with:', result.value, 'variantId:', variantData._id);
                saveVariant(result.value, variantData._id);
              } else {
                console.log('User cancelled or dismissed the dialog:', result.dismiss);
              }
            });
          }

          // --- Save variant to server ---
          async function saveVariant(data, variantId = undefined) {
            console.log('saveVariant called with:', data, variantId);
            const url = variantId
              ? `/admin/products/variants/edit/${variantId}`
              : `/admin/products/<%= product._id %>/variants`;

            const method = variantId ? 'PUT' : 'POST';
            try {
              const res = await fetch(url, {
                method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
              });

              if (!res.ok) {
                const txt = await res.text().catch(() => '');
                throw new Error('Network error: ' + res.status + ' ' + txt);
              }

              const json = await res.json().catch(() => ({ success: false, message: 'Invalid JSON response' }));
              console.log('saveVariant response:', json);

              if (json.success) {
                Swal.fire({
                  icon: 'success',
                  title: variantId ? 'Variant Updated' : 'Variant Added',
                  text: json.message || 'Saved successfully!',
                  timer: 1500,
                  showConfirmButton: false
                }).then(() => location.reload());
              } else {
                Swal.fire({ icon: 'error', title: 'Failed', text: json.message || 'Save failed' });
              }
            } catch (err) {
              console.error('saveVariant error:', err);
              Swal.fire({ icon: 'error', title: 'Server Error', text: 'Try again later. ' + (err.message || '') });
            }
          }

          // --- Delete variant (unchanged but safe DOM removal) ---
          function deleteVariant(id) {
            Swal.fire({
              title: "Are you sure?",
              text: "This will permanently delete the variant and all its associated images.",
              icon: "warning",
              showCancelButton: true,
              confirmButtonColor: "#d33",
              cancelButtonColor: "#6c757d",
              confirmButtonText: "Yes, delete it!"
            }).then(result => {
              if (result.isConfirmed) {
                fetch(`/admin/products/variants/delete/${id}`, { method: 'DELETE' })
                  .then(res => res.json())
                  .then(response => {
                    if (response.success) {
                      Swal.fire({
                        icon: "success",
                        title: "Variant Deleted",
                        text: "Variant deleted successfully.",
                        timer: 2000,
                        showConfirmButton: false
                      }).then(() => location.reload());

                    } else {
                      Swal.fire("Error", response.message || 'Delete failed', "error");
                    }
                  })
                  .catch(err => {
                    console.error('deleteVariant error', err);
                    Swal.fire({ icon: "error", title: "Server Error", text: "Try again later." });
                  });
              }
            });
          }

          let cropper = null;
          let currentVariantId = null;

          // Listen on a stable parent, e.g., the table
          document.querySelector('.variants-table').addEventListener('click', function (e) {
            const placeholder = e.target.closest('.image-upload-placeholder');
            if (!placeholder) return;

            const box = placeholder.closest('.add-image-box');
            if (!box) return;

            const variantId = box.dataset.variantId;
            if (!variantId) return;

            // Call your existing addImg function
            addImg(variantId);
          });


          function addImg(variantId) {
            currentVariantId = variantId;

            Swal.fire({
              title: 'Upload & Crop Image',
              html: `
      <input type="file" id="swalImageFile" class="swal2-file mb-2" accept="image/*">
      <div id="swalImagePreview" style="margin-top:10px; display:none;">
        <img id="swalPreviewImg" style="max-width:100%;" />
      </div>
    `,
              showCancelButton: true,
              confirmButtonText: 'Upload',
              didOpen: () => {
                const fileInput = document.getElementById('swalImageFile');

                fileInput.addEventListener('change', () => {
                  const file = fileInput.files[0];
                  if (!file) return;

                  const reader = new FileReader();
                  reader.onload = () => {
                    const previewDiv = document.getElementById('swalImagePreview');
                    const img = document.getElementById('swalPreviewImg');
                    previewDiv.style.display = 'block';
                    img.src = reader.result;

                    // Destroy previous cropper if exists
                    if (cropper) cropper.destroy();

                    // Initialize cropper
                    cropper = new Cropper(img, {
                      aspectRatio: 3,  // Free ratio
                      viewMode: 2,       // Restrict crop box inside image
                      autoCropArea: 1,
                      movable: true,
                      zoomable: true,
                      rotatable: true,
                      scalable: true
                    });
                  };
                  reader.readAsDataURL(file);
                });
              },
              preConfirm: () => {
                if (!cropper) {
                  Swal.showValidationMessage('Please select and crop an image!');
                  return false;
                }

                // Get cropped image as Blob at original size
                return new Promise((resolve, reject) => {
                  cropper.getCroppedCanvas().toBlob(async (blob) => {
                    try {
                      const fd = new FormData();
                      fd.append('image', blob, 'variant.jpg');

                      const res = await fetch(`/admin/products/variants/${currentVariantId}/images`, {
                        method: 'POST',
                        body: fd
                      });

                      const json = await res.json();
                      if (json.success) resolve(json);
                      else reject(json.message || 'Upload failed');
                    } catch (err) {
                      reject(err.message || 'Upload failed');
                    }
                  }, 'image/jpeg');
                });
              }
            }).then(result => {
              if (result.isConfirmed) {
                Swal.fire({
                  icon: 'success',
                  title: 'Image Uploaded',
                  showConfirmButton: false,
                  timer: 1500
                }).then(() => location.reload());
              }
            }).catch(err => {
              Swal.fire({ icon: 'error', title: 'Upload Failed', text: err });
            });
          }

        </script>

</body>

</html>
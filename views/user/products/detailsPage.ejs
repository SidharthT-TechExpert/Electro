<%- include("../partials/user/header.ejs") %>

  <!-- CSS -->
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  <link href="/css/header.css" rel="stylesheet">
  <link href="/css/footer.css" rel="stylesheet">
  <link href="/css/home.css" rel="stylesheet">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.23.0/dist/sweetalert2.min.css">
  <link rel="stylesheet" href="/css/user/product-page.css">

  <style>
    /* --- Existing CSS --- */
    .product-title {
      font-weight: bolder;
      color: #222;
      line-height: 1.4;
    }

    .spec-badge {
      display: inline-flex;
      align-items: center;
      background: linear-gradient(135deg, #e3f2fd, #bbdefb);
      color: #0d47a1;
      padding: 5px 12px;
      margin: 4px;
      border-radius: 20px;
      font-size: 13px;
      font-weight: 500;
      box-shadow: 0 1px 3px rgba(0, 0, 0, .08);
      transition: all .2s ease-in-out;
    }

    .spec-badge:hover {
      background: linear-gradient(135deg, #bbdefb, #90caf9);
      transform: translateY(-1px);
    }

    .spec-badge i {
      margin-right: 5px;
      font-size: 14px;
      color: #1565c0;
    }

    .product-title .highlights {
      display: block;
      font-size: 14px;
      color: #666;
      margin-top: 5px;
      font-style: italic;
    }

    .product-title .sku {
      display: block;
      font-size: 13px;
      color: #999;
      margin-top: 4px;
    }

    @media(max-width:768px) {
      .product-title {
        font-size: 1.3rem;
        flex-direction: column;
        align-items: flex-start;
      }

      .spec-badge {
        font-size: 12px;
        padding: 4px 10px;
      }
    }

    .discount {
      font-size: 16px;
      color: #388E3C;
      font-weight: 500;
    }

    .variant-section {
      margin-top: 20px;
    }

    .variant-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 10px;
    }

    .variant-options {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .variant-option {
      border: 2px solid #ddd;
      border-radius: 8px;
      padding: 5px;
      cursor: pointer;
      transition: all .2s ease;
    }

    .variant-option.selected {
      border-color: #2874f0;
    }

    .variant-option img {
      width: 70px;
      height: 70px;
      object-fit: cover;
      border-radius: 10px;
    }

    .discount-badge {
      position: absolute;
      top: 15px;
      left: 15px;
      background-color: #ff3e3e;
      color: #fff;
      font-weight: bold;
      font-size: 14px;
      padding: 6px 12px;
      border-radius: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10;
      box-shadow: 0 2px 6px rgba(0, 0, 0, .2);
    }

    .discount-badge span {
      font-size: 13px;
      line-height: 1;
    }

    .btn-buy-now {
      background-color: #ff9800;
      color: white;
      font-weight: bold;
      border: none;
      padding: 10px 18px;
      border-radius: 6px;
      transition: background .3s;
    }

    .btn-buy-now:hover {
      background-color: #e68900;
    }

    .main-image-container {
      position: relative;
      width: 100%;
      height: 500px;
      overflow: hidden;
      border: 1px solid #eaeaea;
      border-radius: 8px;
      background: #fff;
    }

    .main-image {
      width: 100%;
      height: 100%;
      object-fit: contain;
      cursor: crosshair;
    }

    .zoomContainer {
      z-index: 1000 !important;
    }

    .zoomWindow {
      border: 2px solid #2874f0 !important;
      border-radius: 4px !important;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;
    }

    @media (max-width: 768px) {
      .main-image-container {
        height: 400px;
      }

      .main-image {
        cursor: default;
      }
    }

    /* Cart specific styles */
    .cart-success {
      background-color: #4caf50 !important;
    }

    .cart-error {
      background-color: #f44336 !important;
    }

    /* Wishlist active state */
    .wishlist-btn.active {
      color: #ff0000 !important;
    }

    .added-to-cart {
      background-color: #4caf50 !important;
      cursor: not-allowed;
    }

    /* Simple Zoom Styles */
    .main-image-container {
      position: relative;
      overflow: hidden;
      cursor: zoom-in;
      transition: all 0.3s ease;
    }

    .main-image.zoomed {
      cursor: zoom-out;
      transform: scale(2);
      transition: transform 0.3s ease;
    }

    .main-image-container:has(.zoomed) {
      overflow: scroll;
      cursor: zoom-out;
    }

    /* Hide scrollbars when zoomed but allow scrolling */
    .main-image-container::-webkit-scrollbar {
      display: none;
    }

    .main-image-container {
      -ms-overflow-style: none;
      scrollbar-width: none;
    }

    @media (max-width: 768px) {
      .main-image-container {
        cursor: default;
        overflow: hidden !important;
      }

      .main-image.zoomed {
        transform: scale(1) !important;
        cursor: default !important;
      }
    }

    /* --- Flipkart Zoom Effect - Alternative --- */
    .zoom-lens {
      position: absolute;
      width: 150px;
      height: 150px;
      background: rgba(40, 116, 240, 0.2);
      border: 2px solid #2874f0;
      cursor: crosshair;
      display: none;
      pointer-events: none;
      z-index: 1000;
    }

    .zoom-preview-container {
      position: absolute;
      top: 0;
      left: calc(100% + 20px);
      width: 400px;
      height: 400px;
      border: 1px solid #eaeaea;
      border-radius: 8px;
      overflow: hidden;
      background: #fff;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      display: none;
      z-index: 1001;
    }



    .zoomed-image {
      width: 100%;
      height: 100%;
      background-size: 200% 200%;
      background-repeat: no-repeat;
      background-position: 0 0;
    }

    /* Make sure the image gallery container can accommodate the zoom preview */
    .image-gallery {
      position: relative;
    }

    /* Hide zoom on mobile */
    @media (max-width: 1024px) {
      .zoom-preview-container {
        display: none !important;
      }
    }

    .zoom-preview-container.active {
      position: fixed;
      top: 125px;
      left: 650px;
      width: 800px;
      height: 600px;
      background: red !important;
      z-index: 9999;
      display: block !important;
      border: 2px solid #2874f0;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
    }
  </style>

  <section class="product-page">
    <div class="product-container">

      <!-- Left Side - Images -->
      <div class="product-images-section">
        <div class="image-gallery">
          <div class="thumbnail-list" id="thumbnailList"></div>
          <div class="main-image-container" id="mainImageContainer">
            <img class="main-image" id="mainImage"
              src="<%= product.variants[0]?.product_image[0] || '/images/placeholder.png' %>" alt="<%= product.name %>">
            <div class="zoom-lens" id="zoomLens"></div>
            <div class="zoom-preview-container" id="zoomPreviewContainer">
              <div class="zoomed-image" id="zoomedImage"></div>
            </div>
            <div class="discount-badge" id="discountBadge" style="display:none;">
              <span id="discountTag"></span>
            </div>
          </div>
        </div>
      </div>

      <!-- Right Side - Details -->
      <div class="product-details-section">
        <div class="product-breadcrumb">
          <a href="/">Home</a> / <a href="/shop">Products</a> / <%= product.name %>
        </div>

        <!-- Product Title -->
        <h1 class="product-title"></h1>

        <!-- Subtitle, Rating, Brand -->
        <p class="product-subtitle">
          <%= product.category[0]?.name || ' Product' %>
        </p>
        <div class="rating-section">
          <div class="rating-badge">
            <%= (product.rating || 5).toFixed(1) %> <i class="fas fa-star"></i>
          </div>
          <span class="rating-count">
            <%= product.reviewCount || 5 %> Ratings & Reviews
          </span>
        </div>
        <% if(product.brand){ %>
          <div class="brand-section">
            <img style="border-radius: 30px;" class="brand-logo"
              src="<%= product.brand.logo || '/images/placeholder.png' %>" alt="<%= product.brand.name %>">
            <span class="brand-name">
              <%= product.brand.name %>
            </span>
          </div>
          <% } %>

            <!-- Price -->
            <div class="price-section">
              <div class="price-container" id="price-Container"></div>
              <h6 style="color: green; font-size: large;">+ Free Delivery</h6>
            </div>

            <!-- Variants -->
            <% if (product.variants && product.variants.length>0){ %>
              <div class="variant-section">
                <div class="variant-title">Available Variants</div>
                <div class="variant-options" id="variantOptions">
                  <% product.variants.forEach((variant,index)=>{ %>
                    <div class="variant-option <%= index===0?'selected':'' %>" data-variant-id="<%= variant._id %>"
                      data-variant='<%- JSON.stringify(variant) %>'>
                      <img src="<%= variant.product_image?.[0] || '/images/no-image.png' %>"
                        alt="Variant <%= index+1 %>">
                      <div class="variant-color-name">
                        <%= variant.color %>
                      </div>
                    </div>
                    <% }) %>
                </div>
              </div>
              <% } %>

                <!-- Buttons -->
                <div class="action-buttons">
                  <button class="btn-cart add-to-cart" id="addToCartBtn" data-product-id="<%= product._id %>"><i
                      class="fas fa-shopping-cart"></i> ADD TO CART</button>
                  <button class="wishlist-btn wishlist-toggle" id="wishlist-btn" data-product-id="<%= product._id %>"><i
                      class="far fa-heart"></i></button>
                  <button class="btn-buy" id="buyNowBtn" data-product-id="<%= product._id %>"><i
                      class="fas fa-bolt"></i> BUY NOW</button>
                </div>

                <!-- Delivery -->
                <div class="delivery-section">
                  <div class="delivery-item"><i class="fas fa-truck"></i>
                    <div><strong>Free Delivery</strong> - Get it by tomorrow</div>
                  </div>
                  <div class="delivery-item"><i class="fas fa-undo-alt"></i>
                    <div><strong>7 Days Return Policy</strong> - Easy returns & exchanges</div>
                  </div>
                  <div class="delivery-item"><i class="fas fa-shield-alt"></i>
                    <div><strong>Warranty</strong> - 1 Year Manufacturer Warranty</div>
                  </div>
                </div>

                <!-- Specs Section -->
                <div class="specifications-section"></div>
      </div>
    </div>
  </section>

  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

  <!-- Other libraries -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script src="/js/main.js"></script>

  <script>
    const productVariants = <%- JSON.stringify((product.variants || []).map(v => ({ ...v, _id: String(v._id) }))) %> || [];
    const productData = <%- JSON.stringify({ _id: String(product._id), brand: product.brand?.name || '' }) %>;
    const user = <%- user ? JSON.stringify(user) : 'null' %>;
    const userWishlist = <%- JSON.stringify(user?.wishlists?.products || []) %>;
    let userCart = user?.cart?.products?.map(item => ({ productId: String(item.product_id), variantId: String(item.variant_id) })) || [];

    let currentVariant = productVariants[0] || null;

    $(document).ready(function () {
      console.log('🔄 Product page loading...');

      const mainImage = $("#mainImage");
      const mainImageContainer = $("#mainImageContainer");
      const zoomLens = $("#zoomLens");
      const zoomPreviewContainer = $("#zoomPreviewContainer");
      const zoomedImage = $("#zoomedImage");
      const thumbnailList = $("#thumbnailList");
      const variantOptionsContainer = $("#variantOptions");

      // ---- Flipkart Zoom Effect ----
      function initZoom() {
        if (window.innerWidth <= 1024) {
          console.log('Zoom disabled on mobile/tablet');
          return;
        }

        const img = mainImage[0];
        if (!img) return;

        // Clear previous event handlers
        mainImageContainer.off('mousemove.zoom mouseenter.zoom mouseleave.zoom');

        mainImageContainer.on('mouseenter.zoom', function () {
          if (window.innerWidth <= 1024) return;

          const containerWidth = mainImageContainer.width();
          const containerHeight = mainImageContainer.height();
          const imgWidth = img.naturalWidth;
          const imgHeight = img.naturalHeight;

          // Only enable zoom if image is larger than container
          if (imgWidth > containerWidth || imgHeight > containerHeight) {
            zoomLens.css({
              width: '100px',
              height: '100px'
            }).show();

            zoomPreviewContainer.addClass('active');

            // Set zoomed image background
            zoomedImage.css({
              'background-image': `url('${mainImage.attr('src')}')`,
              'background-size': `${imgWidth * 2}px ${imgHeight * 2}px`
            });
          }
        });

        mainImageContainer.on('mousemove.zoom', function (e) {
          if (window.innerWidth <= 1024 || !zoomLens.is(':visible')) return;

          const containerOffset = mainImageContainer.offset();
          const containerWidth = mainImageContainer.width();
          const containerHeight = mainImageContainer.height();
          const imgWidth = img.naturalWidth;
          const imgHeight = img.naturalHeight;

          // Calculate mouse position relative to container
          let x = e.pageX - containerOffset.left;
          let y = e.pageY - containerOffset.top;

          // Calculate lens position (center lens on cursor)
          const lensWidth = zoomLens.width();
          const lensHeight = zoomLens.height();

          let lensX = x - lensWidth / 2;
          let lensY = y - lensHeight / 2;

          // Boundary checks for lens
          lensX = Math.max(0, Math.min(lensX, containerWidth - lensWidth));
          lensY = Math.max(0, Math.min(lensY, containerHeight - lensHeight));

          // Update lens position
          zoomLens.css({
            left: lensX + 'px',
            top: lensY + 'px'
          });

          // Calculate background position for zoomed image (2x zoom)
          const bgX = (lensX / containerWidth) * imgWidth * 2;
          const bgY = (lensY / containerHeight) * imgHeight * 2;

          // Update zoomed image position
          zoomedImage.css({
            'background-position': `-${bgX}px -${bgY}px`
          });
        });

        mainImageContainer.on('mouseleave.zoom', function () {
          zoomLens.hide();
          zoomPreviewContainer.removeClass('active');
        });

        console.log('✅ Flipkart zoom initialized');
      }

      function destroyZoom() {
        mainImageContainer.off('mousemove.zoom mouseenter.zoom mouseleave.zoom');
        zoomLens.hide();
        zoomPreviewContainer.removeClass('active');
      }

      function updateMainImage(imgUrl) {
        console.log('🔄 Updating main image:', imgUrl);

        // Destroy existing zoom
        destroyZoom();

        // Update image source
        mainImage.attr("src", imgUrl);

        // Reinitialize zoom after image loads
        mainImage.one('load', function () {
          console.log('✅ Image loaded, initializing zoom');
          setTimeout(initZoom, 100);
        });

        // If image already loaded
        if (mainImage[0].complete) {
          setTimeout(initZoom, 100);
        }
      }

      // ---- Thumbnails ----
      function renderThumbnails(variant) {
        thumbnailList.empty();
        const images = variant?.product_image?.length ? variant.product_image : ['/images/placeholder.png'];

        images.forEach((img, idx) => {
          const div = $(`
        <div class="thumbnail ${idx === 0 ? 'active' : ''}" data-image="${img}">
          <img src="${img}" alt="Thumbnail ${idx + 1}" onerror="this.src='/images/placeholder.png'">
        </div>
      `);

          div.on("click", function () {
            $(".thumbnail").removeClass("active");
            $(this).addClass("active");
            updateMainImage(img);
          });

          thumbnailList.append(div);
        });

        if (images.length) {
          updateMainImage(images[0]);
        }
      }

      // ---- Product Details ----
      function updateProductDetails(variant) {
        if (!variant) return;

        // Title
        const titleEl = $(".product-title");
        const brandName = productData.brand?.toUpperCase() || "";
        const modelDesc = variant.description || "";
        let html = `<span class="brand">${brandName}</span><span class="model"> ${modelDesc}</span>`;
        titleEl.html(html);

        // Price
        const priceEl = $(".price-container");
        const discountBadge = $("#discountBadge");

        if (variant.price > variant.finalPrice && variant.appliedDiscountValue > 0) {
          priceEl.html(`
        <span class="current-price">₹${variant.finalPrice.toLocaleString()}</span>
        <span class="original-price">₹${variant.price.toLocaleString()}</span>
        <span class="discount-tag">${variant.discountPercentage}% off</span>
      `);
          discountBadge.show().find('span').text(`${variant.discountPercentage}% OFF`);
        } else {
          priceEl.html(`<span class="current-price">₹${variant.price.toLocaleString()}</span>`);
          discountBadge.hide();
        }

        // Specifications
        const specContainer = $(".specifications-section");
        const specs = { ...(variant.specifications || {}) };
        if (variant.color) specs.color = variant.color;

        let specHtml = '<h2 class="description-title">Specifications</h2>';
        for (let key in specs) {
          if (key === 'stock') continue;
          if (specs[key]) {
            specHtml += `<div class="spec-row">
          <div class="spec-label">${key.charAt(0).toUpperCase() + key.slice(1)}</div>
          <div class="spec-value">${specs[key]}</div>
        </div>`;
          }
        }
        specContainer.html(specHtml);
      }

      // ---- Variant Selection ----
      function setSelectedVariantByIndex(idx) {
        const variant = productVariants[idx];
        if (!variant) return;

        currentVariant = variant;

        // Update UI
        variantOptionsContainer.find(".variant-option").removeClass("selected");
        variantOptionsContainer.find(`.variant-option[data-variant-id="${variant._id}"]`).addClass("selected");

        // Update all sections
        renderThumbnails(variant);
        updateProductDetails(variant);
        updateWishlistState();
        updateCartState();
      }

      // ---- Wishlist & Cart ----
      function updateWishlistState() {
        const wishlistBtn = $("#wishlist-btn");
        if (!wishlistBtn.length || !currentVariant) return;

        const icon = wishlistBtn.find("i");
        const isWishlisted = userWishlist.some(p =>
          String(p.productId) === String(productData._id) &&
          String(p.variantId) === String(currentVariant._id)
        );

        if (isWishlisted) {
          wishlistBtn.addClass("active").css("color", "#ff0000");
          icon.removeClass("far").addClass("fas");
        } else {
          wishlistBtn.removeClass("active").css("color", "#1f1f1f");
          icon.removeClass("fas").addClass("far");
        }
      }

      function updateCartState() {
        const addToCartBtn = $("#addToCartBtn");
        if (!addToCartBtn.length) return;

        const isInCart = userCart.some(item =>
          String(item.productId) === String(productData._id) &&
          String(item.variantId) === String(currentVariant._id)
        );

        if (isInCart) {
          addToCartBtn.html('<i class="fas fa-check"></i> GO TO CART')
            .prop("disabled", false)
            .off('click')
            .on('click', () => window.location.href = '/cart');
        } else {
          addToCartBtn.html('<i class="fas fa-shopping-cart"></i> ADD TO CART')
            .prop("disabled", false)
            .off('click')
            .on('click', () => addToCart(productData._id, currentVariant._id));
        }
      }

      // ---- Event Handlers ----
      function initializeEventHandlers() {
        // Variant selection
        variantOptionsContainer.on("click", ".variant-option", function () {
          const variantId = $(this).data("variant-id");
          const idx = productVariants.findIndex(v => String(v._id) === String(variantId));
          if (idx !== -1) setSelectedVariantByIndex(idx);
        });

        // Wishlist
        $("#wishlist-btn").on('click', toggleWishlist);

        // Buy Now
        $("#buyNowBtn").on('click', buyNow);

        // Window resize
        $(window).on('resize', function () {
          if (window.innerWidth <= 1024) {
            destroyZoom();
          } else {
            initZoom();
          }
        });
      }

      // ---- Initialize ----
      function initializeProductPage() {
        console.log('🚀 Initializing product page with Flipkart zoom...');

        if (productVariants.length > 0) {
          setSelectedVariantByIndex(0);
        }

        initializeEventHandlers();

        // Initialize zoom
        setTimeout(initZoom, 1000);
      }

      // ---- API Functions ----
      async function addToCart(productId, variantId, quantity = 1) {
        if (!user) {
          Swal.fire({
            icon: 'warning',
            title: 'Login Required',
            text: 'Please login to add items to cart',
            showCancelButton: true,
            confirmButtonText: 'Login Now',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33'
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = '/login'; // Redirect to login page
            }
          });
          return;
        }

        const addToCartBtn = $("#addToCartBtn");
        addToCartBtn.html('<i class="fas fa-spinner fa-spin"></i> Loading...').prop("disabled", true);

        try {
          const res = await axios.post('/cart/add', { productId, variantId, quantity });
          if (res.data.success) {
            addToCartBtn.html('<i class="fas fa-check"></i> GO TO CART');
            setTimeout(() => window.location.href = '/cart', 1000);
          } else {
            throw new Error(res.data.message);
          }
        } catch (err) {
          Swal.fire('Error', err.response?.data?.message || 'Failed to add product', 'error');
          updateCartState();
        }
      }

      async function buyNow() {
        if (!user) {
          Swal.fire({
            icon: 'warning',
            title: 'Login Required',
            text: 'Please login to add items to cart',
            showCancelButton: true,
            confirmButtonText: 'Login Now',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33'
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = '/login'; // Redirect to login page
            }
          });
          return;
        }

        if (!currentVariant?._id) {
          Swal.fire('Error', 'Please select a variant', 'error');
          return;
        }

        try {
          await axios.post('/cart/add', {
            productId: productData._id,
            variantId: currentVariant._id,
            quantity: 1
          });
          window.location.href = '/checkout';
        } catch (err) {
          Swal.fire('Error', err.response?.data?.message || 'Failed to process request', 'error');
        }
      }

      async function toggleWishlist() {
        if (!user) {
          Swal.fire({
            icon: 'warning',
            title: 'Login Required',
            text: 'Please login to add items to cart',
            showCancelButton: true,
            confirmButtonText: 'Login Now',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33'
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = '/login'; // Redirect to login page
            }
          });
        }

        try {
          const res = await axios.post('/shop/wishlist', {
            productId: productData._id,
            variantId: currentVariant._id
          });

          // Update local state
          const index = userWishlist.findIndex(p =>
            String(p.variantId) === String(currentVariant._id)
          );

          if (res.data.removed && index > -1) {
            userWishlist.splice(index, 1);
          } else if (!res.data.removed && index === -1) {
            userWishlist.push({ productId: productData._id, variantId: currentVariant._id });
          }

          updateWishlistState();
        } catch (err) {
          Swal.fire('Error', err.response?.data?.message || 'Failed to update wishlist', 'error');
        }
      }

      // Start the page
      initializeProductPage();
    });

    // Global error handler for images
    $(document).on('error', 'img', function () {
      console.log('🖼️ Image load error, using placeholder');
      $(this).attr('src', '/images/placeholder.png');
    });


    // Temporary test - add this after your existing JavaScript to test the zoom
    setTimeout(() => {
      console.log('Testing zoom container visibility');
      console.log('Zoom container exists:', $('#zoomPreviewContainer').length > 0);
      console.log('Zoom container CSS:', $('#zoomPreviewContainer').css('display'));

      // Manually show the zoom container for testing
      $('#zoomPreviewContainer').addClass('active');
      console.log('Zoom container manually activated - check if visible');

      // Hide after 3 seconds
      setTimeout(() => {
        $('#zoomPreviewContainer').removeClass('active');
      }, 3000);
    }, 2000);
  </script>

  <%- include("../partials/user/footer.ejs") %>
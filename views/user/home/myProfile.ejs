<link rel="stylesheet" href="/css/home.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

<%- include("../partials/user/header") %>
  <%- include("../partials/user/messages") %>

    <main class="profile-page container my-5">
      <div class="row">
        <!-- Sidebar -->
        <%- include("../partials/user/sideBar") %>

          <!-- Main Profile Section -->
          <section class="col-md-9">
            <div class="card shadow-sm p-4 border-0">
              <h5 class="text-danger fw-semibold mb-4">Edit Your Profile</h5>

              <!-- ✅ Profile Photo Upload -->
              <div class="text-center mb-4">
                <img id="profilePreview"
                  src="<%= user.profilePhoto ? '/profile-photo/' + user.profilePhoto : '/uploads/img/user.png' %>"
                  alt="Profile Photo" class="rounded-circle border" width="120" height="120" style="object-fit: cover;">
                <div class="mt-2">
                  <label class="btn btn-outline-danger btn-sm">
                    <i class="fa fa-camera"></i> Change Photo
                    <input type="file" name="profilePhoto" id="profilePhotoInput" accept="image/*" hidden>
                  </label>
                </div>
              </div>

              <!-- Name -->
              <div class="mb-3">
                <label class="form-label fw-semibold">Name
                  <a onclick="editName('<%= user.name %>','<%= user._id %>' )" class="text-primary small ms-1">Edit</a>
                </label>
                <input type="text" class="form-control" value="<%= user.name %>" readonly>
              </div>

              <!-- Password Changes -->
              <h6 class="fw-bold mt-4 mb-3">Password Changes</h6>
              <form id="passwordForm" onsubmit="return ChangePassword(this)">
                <div class="mb-3">
                  <input type="password" name="cPassword" class="form-control" placeholder="Current Password">
                </div>
                <div class="mb-3">
                  <input type="password" name="Password" class="form-control" placeholder="New Password">
                </div>
                <div class="mb-3">
                  <input type="password" name="confirmPassword" class="form-control" placeholder="Confirm New Password">
                </div>
                <div class="d-flex justify-content-end gap-2">
                  <button type="button" onclick="this.form.reset()" class="btn btn-outline-dark">Cancel</button>
                  <button type="submit" class="btn btn-danger fw-semibold">Update Password</button>
                </div>
              </form>

              <!-- Email & Phone -->
              <div class="row mt-4">
                <div class="col-md-6 mb-3">
                  <label class="form-label fw-semibold">Email
                    <a onclick="editEmail('<%= user.email %>', '<%= user.id %>')"
                      class="text-primary small ms-1">Edit</a>
                  </label>
                  <input type="email" class="form-control" value="<%= user.email %>" readonly>
                </div>
                <div class="col-md-6 mb-3">
                  <label class="form-label fw-semibold">Phone
                    <a onclick="editPhone('<%= user.phone %>')" class="text-primary small ms-1">Edit</a>
                  </label>
                  <input type="text" class="form-control" value="<%= user.phone %>" readonly>
                </div>
              </div>
            </div>
          </section>
      </div>
    </main>

    <%- include("../partials/user/footer") %>

      <style>
        .card input[readonly] {
          background: #f8f8f8;
        }

        .btn-danger {
          background: #e63946;
          border: none;
        }

        .btn-danger:hover {
          background: #c92c3d;
        }
      </style>

      <!-- Include SweetAlert2 CDN -->
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

      <script>
        function ChangePassword(f) {
          const cPassword = f.cPassword.value.trim();   // current password
          const newPassword = f.Password.value.trim();  // new password
          const confirmPassword = f.confirmPassword.value.trim(); // confirmation

          // Validation: empty fields
          if (!cPassword || !newPassword || !confirmPassword) {
            Swal.fire({
              icon: "warning",
              title: "Missing Fields",
              text: "Please fill in all password fields.",
            });
            return false;
          }

          // Validation: minimum length
          if (newPassword.length < 8) {
            Swal.fire({
              icon: "error",
              title: "Weak Password",
              text: "Password must be at least 8 characters long.",
            });
            return false;
          }

          // Validation: must contain at least one number and one special character
          const hasNumber = /[0-9]/.test(newPassword);
          const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(newPassword);

          if (!hasNumber || !hasSpecialChar) {
            Swal.fire({
              icon: "error",
              title: "Weak Password",
              text: "Password must contain at least one number and one special character.",
            });
            return false;
          }

          // Validation: confirm password match
          if (newPassword !== confirmPassword) {
            Swal.fire({
              icon: "error",
              title: "Password Mismatch",
              text: "New password and confirmation do not match.",
            });
            return false;
          }

          // Validation: new password should differ from current password
          if (newPassword === cPassword) {
            Swal.fire({
              icon: "info",
              title: "Same Password",
              text: "New password must be different from your current password.",
            });
            return false;
          }

          // Send data to backend
          fetch("/change-password", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ cPassword, newPassword }),
          })
            .then((res) => res.json()) // ✅ parse JSON first
            .then((response) => {
              if (response.success) {
                Swal.fire({
                  icon: "success",
                  title: "Password Updated!",
                  text: response.message || "Your password was changed successfully.",
                  timer: 1500,
                  showConfirmButton: false,
                }).then(() => location.reload());
              } else {
                Swal.fire({
                  icon: "error",
                  title: "Error",
                  text: response.message || "Unable to change password.",
                });
              }
            })
            .catch((error) => {
              console.error("Error changing password:", error);
              Swal.fire({
                icon: "error",
                title: "Server Error",
                text: "Something went wrong. Please try again later.",
              });
            });

          return false; // ✅ prevent form reload
        }

        async function editPhone(currentPhone) {
          // Ask for new phone number
          const { value: newPhone } = await Swal.fire({
            title: "Enter New Phone Number",
            input: "number",
            inputLabel: "We’ll send an OTP to this number",
            inputValue: currentPhone,
            inputPlaceholder: "Enter new phone number",
            confirmButtonText: "Send OTP",
            showCancelButton: true,
            inputValidator: (value) => {
              if (!/^[0-9]{10}$/.test(value)) {
                return "Please enter a valid 10-digit phone number.";
              }
            },
          });

          if (!newPhone) return;

          // Step 2: Send OTP request
          const otpResponse = await fetch("/send-otp", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ phone: newPhone }),
          }).then((res) => res.json());

          if (!otpResponse.success) {
            return Swal.fire("Error", otpResponse.message || "Failed to send OTP", "error");
          } else {
            Swal.fire({
              icon: 'success',
              text: otpResponse.message,
              timer: 1500
            });
          }



          // Step 3: Ask user to enter OTP
          const { value: otp } = await Swal.fire({
            title: "Enter OTP",
            input: "text",
            inputPlaceholder: "Enter 6-digit OTP",
            confirmButtonText: "Verify OTP",
            showCancelButton: true,
            inputValidator: (value) => {
              if (!/^[0-9]{6}$/.test(value)) {
                return "Please enter a valid 6-digit OTP.";
              }
            },
          });

          if (!otp) return;

          // Step 4: Verify OTP
          const verifyResponse = await fetch("/verifyOTP", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ phone: newPhone, otp }),
          }).then((res) => res.json());

          if (verifyResponse.success) {
            Swal.fire({
              icon: "success",
              title: "Phone Updated!",
              text: "Your phone number has been successfully updated.",
              timer: 1500,
              showConfirmButton: false,
            }).then(() => location.reload());
          } else {
            Swal.fire("Error", verifyResponse.message || "Invalid OTP", "error");
          }
        }

        async function editEmail(currentEmail, id) {
          const { value: newEmail } = await Swal.fire({
            title: "Enter New Email Address",
            input: "email",
            inputLabel: "We’ll send an OTP to this email",
            inputValue: currentEmail || "",
            inputPlaceholder: "Enter new email address",
            confirmButtonText: "Send OTP",
            showCancelButton: true,
            inputValidator: (value) => {
              if (!value) return "Please enter an email address.";
              const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              if (!emailRegex.test(value)) return "Please enter a valid email address.";
            },
          });

          if (!newEmail) return;

          try {
            // ✅Send OTP
            const response = await fetch("/send-email-otp", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ email: newEmail, id }),
            }).then((res) => res.json());

            if (!response.success) {
              return Swal.fire("❌ Error", response.message || "Failed to send OTP.", "error");
            }

            await Swal.fire({
              icon: "success",
              text: `OTP has been sent to ${newEmail}`,
              timer: 1500,
              showConfirmButton: false
            });

            // ✅ Enter OTP
            const { value: otp } = await Swal.fire({
              title: "Enter OTP",
              input: "text",
              inputPlaceholder: "Enter 6-digit OTP",
              confirmButtonText: "Verify OTP",
              showCancelButton: true,
              inputValidator: (value) => {
                if (!/^[0-9]{6}$/.test(value)) {
                  return "Please enter a valid 6-digit OTP.";
                }
              },
            });

            if (!otp) return;

            // ✅ Verify OTP
            const verifyResponse = await fetch("/verifyEmail_OTP", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ otp, email: newEmail }),
            }).then((res) => res.json());

            if (verifyResponse.success) {
              console.log(verifyResponse.success)
              Swal.fire({
                icon: "success",
                title: "Email Updated!",
                text: "Your email has been successfully updated.",
                timer: 1500,
                showConfirmButton: false,
              }).then(() => location.reload());
            } else {
              Swal.fire("❌ Error", verifyResponse.message || "Invalid OTP.", "error");
            }
          } catch (error) {
            console.error("Error sending or verifying OTP:", error);
            Swal.fire("⚠️ Error", "Something went wrong. Please try again.", "error");
          }
        }

        const photoInput = document.getElementById("profilePhotoInput");

        photoInput.addEventListener("change", async (event) => {
          const file = event.target.files[0];
          if (!file) return;

          const formData = new FormData();
          formData.append("profilePhoto", file); // must match input name

          try {
            const response = await fetch("/upload-profile-photo", {
              method: "POST",
              body: formData
            });
            const data = await response.json();
            console.log(data); // check what server responds

            if (data.success) {
              Swal.fire({
                icon: "success",
                title: "Profile photo Updated!",
                text: "Your profile photo has been successfully updated.",
                timer: 1500,
                showConfirmButton: false,
              }).then(() => location.reload());
            }
          } catch (err) {
            console.error(err);
          }
        });

        async function editName(currentName, userId) {
          if (!userId) return Swal.fire("❌ Error", "User ID missing", "error");

          // Ask for new name
          const { value: newName } = await Swal.fire({
            title: "Edit Name",
            input: "text",
            inputLabel: "Enter your new full name",
            inputValue: currentName || "",
            inputPlaceholder: "Full name",
            confirmButtonText: "Update Name",
            showCancelButton: true,
            inputValidator: (value) => {
              if (!value.trim()) return "Name cannot be empty.";
              if (value.trim().length < 3) return "Name must be at least 3 characters.";
            },
          });

          if (!newName) return; // user cancelled

          console.log(newName);

          try {
            // Send request to backend to update name
            const response = await fetch("/update-name", {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ name: newName.trim(), id: userId }),
            }).then((res) => res.json());

            if (response.success) {
              Swal.fire({
                icon: "success",
                title: "Name Updated!",
                text: response.message || "Your name has been successfully updated.",
                timer: 1500,
                showConfirmButton: false,
              }).then(() => location.reload());
            } else {
              Swal.fire("❌ Error", response.message || "Failed to update name.", "error");
            }
          } catch (err) {
            console.error("Error updating name:", err);
            Swal.fire("⚠️ Error", "Something went wrong. Please try again.", "error");
          }
        }

      </script>